安装Fabric1.4.3

安装依赖
sudo apt install openssl libssl-dev

下载curl包并解压：
wget https://curl.se/download/curl-7.77.0.tar.gz
tar -zxf curl-7.77.0.tar.gz

编译安装（需要make和gcc支持）：
cd curl-7.77.0
sudo ./configure --with-openssl
sudo make && sudo make install

安装结束后使用如下命令查看是否安装成功，同时注意要支持https协议：
curl -V

如果没有旧版本docker，直接使用如下命令安装。首先安装相关依赖：
sudo apt update
sudo apt install apt-transport-https ca-certificates software-properties-common

接着添加docker官方GPG密钥，命令如下：
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

随后使用如下命令设立仓库：
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

接着使用如下命令安装docker：
sudo apt update
sudo apt-get install docker-ce docker-ce-cli containerd.io

接着使用如下命令查看docker是否安装完成，请保证较高的docker版本（19.03.11以上），否则后续可能失败：
sudo docker version

安装docker-compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

随后使用如下命令查看是否安装成功：
docker-compose version

在https://golang.google.cn/dl/网页下下载Go安装包，或直接使用如下命令下载：
wget https://golang.google.cn/dl/go1.16.5.linux-amd64.tar.gz

接着使用如下命令将文件解压进/usr/local/go文件夹中：
sudo cp go1.16.5.linux-amd64.tar.gz /usr/local
sudo tar -zxf go1.16.5.linux-amd64.tar.gz

接着使用如下命令建立Go工作文件夹：
cd ~
mkdir goDir

随后在~/.bashrc文件中声明Go相关路径，具体信息如下：
export GOPATH=/home/cyf/goDir
export GOROOT=/usr/local/go
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$GOROOT/bin

接着使用source ~/.bashrc命令使配置生效。随后使用如下命令检测是否安装成功：
go version

安装fabric
安装依赖：
sudo apt install libtool libltdl-dev

拉取fabric源码
使用如下命令即可：
mkdir -p $GOPATH/src/github.com/hyperledger
cd $GOPATH/src/github.com/hyperledger

git clone https://github.com/hyperledger/fabric.git 
cd fabric
git branch -a
git checkout v1.4.3

拉取fabric-samples
使用如下命令即可：
cd $GOPATH/src/github.com/hyperledger

git clone git://github.com/hyperledger/fabric-samples.git
cd ./fabric-samples
git branch -a
git checkout v1.4.3

拉取并配置依赖
在fabric/scripts目录下找到bootstrap.sh脚本，复制到与fabric同级目录下，删除bootstrap.sh中的samplesInstall()和binariesInstall()两个方法。命令如下：
cd $GOPATH/src/github.com/hyperledger/fabric/scripts
cp bootstrap.sh ../../

***hyperledger-fabric-linux-amd64-1.4.3.tar***内有bin和config两个文件夹，***hyperledger-fabric-ca-linux-amd64-1.4.3.tar***内有bin文件夹，将两个bin文件夹内的二进制文件汇总在一个bin文件夹内。 最后将bin和config文件夹复制到fabric-samples文件夹内。具体命令如下：

cd $GOPATH/src/github.com/hyperledger/fabric-samples
wget https://github.com/hyperledger/fabric/releases/download/v1.4.3/hyperledger-fabric-linux-amd64-1.4.3.tar.gz
tar -zxf hyperledger-fabric-linux-amd64-1.4.3.tar.gz
mv bin bin1
wget https://github.com/hyperledger/fabric-ca/releases/download/v1.4.3/hyperledger-fabric-ca-linux-amd64-1.4.3.tar.gz
tar -zxf hyperledger-fabric-ca-linux-amd64-1.4.3.tar.gz
mv bin1/* bin/
rm -rf bin1


接着使用如下命令拉取镜像即可，该过程可能会较久：
cd $GOPATH/src/github.com/hyperledger
sudo ./bootstrap.sh 1.4.3 1.4.3 0.4.15

设置环境变量
在~/.bashrc文件中添加如下语句：

export PATH=$PATH:$GOPATH/src/github.com/hyperledger/fabric-samples/bin

随后使用source ~/.bashrc命令使配置生效即可。

测试
首先进入/etc/resolv.conf文件中将options所在语句注释掉，如下图：接着使用如下命令测试：

接着使用如下命令测试：
cd $GOPATH/src/github.com/hyperledger/fabric-samples/first-network
sudo ./byfn.sh up

当出现如下结果后，说明环境搭建完成：

随后使用如下命令关闭网络即可：
sudo ./byfn.sh down


任务一：命令行手动操作
1、证书和密钥的配置，证书和密钥在 crypto-config 下：
../bin/cryptogen generate --config=./crypto-config.yaml
export FABRIC_CFG_PATH=$PWD
../bin/configtxgen -profile TwoOrgsOrdererGenesis -output Block ./channel-artifacts/genesis.block

2、创建 channel transcation，过程图如下：
export CHANNEL_NAME=mychannel
../bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME

../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP

../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP

3. 启动网络
configtx.yaml

docker-compose -f docker -compose-cli.yaml up -d

4. 创建加入信道
启动网络
docker exec -it cli bash
加入信道1
peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
加入信道2
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com:7051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.com/tls/ca.crt peer channel join -b mychannel.block


5. 更新锚节点
peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem



export CHANNEL_NAME=mychannel
peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem




# 确保自己在目录下，如我的就是/fabric-samples-release-1.4/first-network
##手动生成构件
CORE_PEER_GOSSIP_USELEADERELECTION=true
../bin/cryptogen generate --config=./crypto-config.yaml #将会生成证书和密钥，保存在crypto-config 文件夹中。
# 设置configtxgen 工具运行所需要的 configtx.yaml 文件目录
export FABRIC_CFG_PATH=$PWD

# 可以开始调用configtxgen去生成 排序通道 创世区块
../bin/configtxgen -profile TwoOrgsOrdererGenesis -channelID byfn-sys-channel -outputBlock ./channel-artifacts/genesis.block

##创建通道配置交易，
# 创建交易的通道构件
export CHANNEL_NAME=mychannel  
../bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME
# 为构建的通道上的Org1 定义锚节点
../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP
# 定义Org2上的锚节点
../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP

## 启动网络
# 使用配置好了的docker-compose文件关联下载好了的镜像，然后通过前面生成的 genesis.block引导排序节点。
docker-compose -f docker-compose-cli.yaml up -d
# 进入容器cli命令
docker exec -it cli bash

##创建和加入通道
export CHANNEL_NAME=mychannel
# 配置发送CLI调用时需要的环境变量
# 将创建通道配置文件（channel.tx）做为创建通道请求的一部分传递给排序节点。
# 设置环境为Org1的
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer0.org1.example.com:7051 CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt 
# 创建通道
peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

# 将peer0.org1.example.com加入通道中去。
peer channel join -b mychannel.block
# 更新通道，将peer0.org1设为锚节点
peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
# 安装链码
peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/
# 实例化链码
peer chaincode instantiate -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a", "100", "b","200"]}' -P "AND ('Org1MSP.peer','Org2MSP.peer')"
# 将Org2 加入通道
# 设置环境为Org2的
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:9051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt 
# 上面并不是将所有的节点都加入了通道只是简单地加入了peer0.org2.example.com，以便我们可以对定义在通道中的锚节点进行更新。
# 将peer0.org1.example.com加入通道中去。
peer channel join -b mychannel.block
# 更新通道，将peer0.org1设为锚节点
peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
# 安装链码
peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/
# 实例化链码
peer chaincode instantiate -o orderer.example.com:7051 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a", "100", "b","200"]}' -P "AND ('Org1MSP.peer','Org2MSP.peer')"

##可以对链码进行查询、调用等操作了
# 查询a
peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","a"]}'
# 从a中取10到b（指定order服务点、tls模式、证书位置，通道名称，支出方节点地址、证书位置，收取方节点地址、证书位置， 指定Json格式的链码的构造消息函数{}）
peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"Args":["invoke","a","b","10"]}'
# 再次查询，看到金额发送变化
peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","a"]}'

